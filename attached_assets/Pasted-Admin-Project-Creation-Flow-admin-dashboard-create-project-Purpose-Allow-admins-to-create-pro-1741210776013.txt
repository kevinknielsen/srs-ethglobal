Admin Project Creation Flow (/admin-dashboard/create-project)
üîé Purpose: Allow admins to create projects for artists, ensuring that each project has proper funding requirements, milestone structure, and metadata before being launched.

üìå Tech Stack:
‚úÖ Frontend: Next.js + TailwindCSS
‚úÖ Backend: Node.js + Express.js + PostgreSQL
‚úÖ Auth: Placeholder for Privy (Future Implementation)
‚úÖ Blockchain: No on-chain integration yet, but structured for Base L2 with OnchainKit (Future Implementation)

üü• Admin Project Creation Flow Overview
üîé Purpose:
‚úÖ Allows admins to create new projects on behalf of artists
‚úÖ Ensures project funding, milestone structure, and metadata are set correctly
‚úÖ Prepares projects for milestone-based investment & revenue sharing

üìå Steps in Project Creation
1Ô∏è‚É£ Select an Artist
2Ô∏è‚É£ Define Project Details
3Ô∏è‚É£ Set Funding Goal
4Ô∏è‚É£ Create Milestone Structure
5Ô∏è‚É£ Submit Project for Approval

üü• 1. Admin Dashboard ‚Äì Create Project Page (/admin-dashboard/create-project)
üîé Purpose:
‚úÖ Form-based UI for entering project details
‚úÖ Ensures admin selects an artist before creating a project

üü¢ UI Components & Implementation
tsx
Copy
Edit
import { useState } from 'react';

export default function CreateProject() {
  const [artist, setArtist] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [fundingGoal, setFundingGoal] = useState('');
  const [milestones, setMilestones] = useState([{ name: '', payout: '' }]);

  const addMilestone = () => setMilestones([...milestones, { name: '', payout: '' }]);
  const updateMilestone = (index, field, value) => {
    const newMilestones = [...milestones];
    newMilestones[index][field] = value;
    setMilestones(newMilestones);
  };

  const handleSubmit = async () => {
    const res = await fetch('/api/admin/projects', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ artist, title, description, fundingGoal, milestones }),
    });
    if (res.ok) alert('Project Created!');
  };

  return (
    <div className="p-6 max-w-3xl mx-auto">
      <h2 className="text-2xl font-bold">Create New Project</h2>
      
      <label className="block mt-4">Select Artist</label>
      <input type="text" value={artist} onChange={(e) => setArtist(e.target.value)} className="border p-2 w-full" />

      <label className="block mt-4">Project Title</label>
      <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} className="border p-2 w-full" />

      <label className="block mt-4">Description</label>
      <textarea value={description} onChange={(e) => setDescription(e.target.value)} className="border p-2 w-full" />

      <label className="block mt-4">Funding Goal ($)</label>
      <input type="number" value={fundingGoal} onChange={(e) => setFundingGoal(e.target.value)} className="border p-2 w-full" />

      <h3 className="text-xl font-semibold mt-6">Milestones</h3>
      {milestones.map((milestone, index) => (
        <div key={index} className="flex space-x-4 mt-2">
          <input type="text" placeholder="Milestone Name" value={milestone.name} onChange={(e) => updateMilestone(index, 'name', e.target.value)} className="border p-2 w-2/3" />
          <input type="number" placeholder="Payout ($)" value={milestone.payout} onChange={(e) => updateMilestone(index, 'payout', e.target.value)} className="border p-2 w-1/3" />
        </div>
      ))}
      <button onClick={addMilestone} className="mt-4 bg-gray-500 text-white px-4 py-2">+ Add Milestone</button>

      <button onClick={handleSubmit} className="mt-6 bg-red-500 text-white px-4 py-2 w-full">Create Project</button>
    </div>
  );
}
‚úÖ Dynamically adds milestones
‚úÖ Collects all required project information
‚úÖ Sends API request to create the project

üü¢ API Implementation for Project Creation
javascript
Copy
Edit
app.post('/api/admin/projects', async (req, res) => {
  const { artist, title, description, fundingGoal, milestones } = req.body;

  // Ensure artist exists
  const artistExists = await db.user.findUnique({ where: { username: artist } });
  if (!artistExists) return res.status(400).json({ message: 'Artist not found' });

  // Create project
  const newProject = await db.project.create({
    data: {
      artist_id: artistExists.id,
      title,
      description,
      funding_goal: parseFloat(fundingGoal),
      amount_raised: 0,
      status: 'funding',
    },
  });

  // Create milestones
  await Promise.all(
    milestones.map(milestone =>
      db.milestone.create({
        data: {
          project_id: newProject.id,
          name: milestone.name,
          payout_amount: parseFloat(milestone.payout),
          status: 'locked',
        },
      })
    )
  );

  res.json({ message: 'Project created successfully', projectId: newProject.id });
});
‚úÖ Ensures artist exists
‚úÖ Creates project in projects table
‚úÖ Creates associated milestones

üü¢ Database Schema (Already Supports This)
sql
Copy
Edit
CREATE TABLE projects (
  id SERIAL PRIMARY KEY,
  artist_id INT REFERENCES users(id),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  funding_goal DECIMAL(18,2) NOT NULL,
  amount_raised DECIMAL(18,2) DEFAULT 0,
  status VARCHAR(50) CHECK (status IN ('funding', 'in_progress', 'released')),
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE milestones (
  id SERIAL PRIMARY KEY,
  project_id INT REFERENCES projects(id),
  name VARCHAR(255),
  payout_amount DECIMAL(18,2),
  status VARCHAR(50) CHECK (status IN ('locked', 'pending_approval', 'unlocked')),
  created_at TIMESTAMP DEFAULT NOW()
);
‚úÖ New projects & milestones will automatically be linked

üü• Summary of Admin Project Creation Flow
Step	What Happens?	Main API Calls
1Ô∏è‚É£ Select Artist	Admin chooses which artist owns the project	GET /users?role=artist
2Ô∏è‚É£ Define Project Details	Admin enters title, description, funding goal	POST /admin/projects
3Ô∏è‚É£ Set Funding Goal	Ensures min/max funding requirements	Handled in frontend
4Ô∏è‚É£ Create Milestones	Defines payout milestones	Included in POST /admin/projects
5Ô∏è‚É£ Submit for Approval	Project is stored in database & marked as funding	POST /admin/projects
üöÄ Next Steps
‚úÖ Implement Create Project button in Admin Dashboard
‚úÖ Ensure new projects appear in GET /admin/projects
‚úÖ Restrict project creation to admin users only
‚úÖ Test project milestone creation to prevent missing steps