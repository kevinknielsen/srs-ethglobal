### **üõ† Coda Collective Backend Infrastructure (Base L2 + OnchainKit + No IPFS Consideration)**
Since we are **not implementing OnchainKit yet**, but want to **ensure the backend is structured for seamless future integration**, we‚Äôll architect the **basic backend functionality** while **preparing for Base L2 and OnchainKit**.

---

# **üü• Updated Backend Tech Stack**
| **Component**  | **Technology**  | **Purpose**  |
|---|---|---|
| **API Framework**  | **Node.js + Express.js**  | Handles all backend logic  |
| **Database**  | **PostgreSQL**  | Stores users, projects, investments  |
| **ORM**  | **Prisma**  | Manages database schema & queries  |
| **Blockchain**  | **Base (L2 on Ethereum)**  | Smart contracts for escrow, revenue split  |
| **Onchain SDK**  | **OnchainKit (Coinbase)**  | Future contract interactions (not implemented yet)  |
| **Auth**  | **Privy (Planned, not implemented yet)**  | User authentication  |
| **Storage**  | **PostgreSQL + S3 (instead of IPFS)**  | No decentralized storage; all off-chain metadata stored in DB  |

---

# **üü• Backend Development Plan (Phase 1: Basic Functionality)**
We will first **implement the core backend functionality**, ensuring it's **fully operational without blockchain dependencies**. Later, **OnchainKit will be integrated for smart contract interactions**.

---

# **üü• Database Schema (No IPFS, Prepares for OnchainKit)**
üìå **Key Updates:**
‚úÖ **No IPFS** ‚Üí All files/metadata stored in **PostgreSQL + S3**.  
‚úÖ **Prepares for Base L2** ‚Üí Adds `onchain_reference` fields for future blockchain interactions.

## **1Ô∏è‚É£ Users Table (Updated for Privy & Base L2)**
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  privy_id VARCHAR(255) UNIQUE, -- Placeholder for Privy User ID (Future)
  wallet_address VARCHAR(42) UNIQUE NOT NULL,
  email VARCHAR(255) UNIQUE,
  username VARCHAR(50),
  created_at TIMESTAMP DEFAULT NOW()
);
```
‚úÖ **Privy integration is planned but not yet implemented.**  
‚úÖ **`wallet_address` will be required for Base L2 transactions later.**  

---

## **2Ô∏è‚É£ Projects Table (Prepares for OnchainKit)**
Tracks artist projects **off-chain** but includes fields to reference **on-chain equivalents** later.

```sql
CREATE TABLE projects (
  id SERIAL PRIMARY KEY,
  artist_id INT REFERENCES users(id),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  funding_goal DECIMAL(18,2) NOT NULL,
  amount_raised DECIMAL(18,2) DEFAULT 0,
  release_date TIMESTAMP,
  status VARCHAR(50) CHECK (status IN ('funding', 'in_progress', 'released')),
  onchain_reference VARCHAR(255), -- Will be used for OnchainKit integration later
  created_at TIMESTAMP DEFAULT NOW()
);
```
‚úÖ **`onchain_reference` will store smart contract IDs when OnchainKit is added.**  
‚úÖ **For now, all project data is stored off-chain in PostgreSQL.**  

---

## **3Ô∏è‚É£ Investments Table (Off-Chain First, On-Chain Later)**
```sql
CREATE TABLE investments (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  project_id INT REFERENCES projects(id),
  amount DECIMAL(18,2) NOT NULL,
  tokenized_shares DECIMAL(18,2), -- Future field for tokenized investment tracking
  created_at TIMESTAMP DEFAULT NOW()
);
```
‚úÖ **For now, investments are tracked in PostgreSQL, but `tokenized_shares` is reserved for future Base L2 on-chain records.**  

---

## **4Ô∏è‚É£ Milestones Table (On-Chain Ready, Off-Chain Now)**
```sql
CREATE TABLE milestones (
  id SERIAL PRIMARY KEY,
  project_id INT REFERENCES projects(id),
  name VARCHAR(255),
  payout_amount DECIMAL(18,2),
  status VARCHAR(50) CHECK (status IN ('locked', 'pending_approval', 'unlocked')),
  proof_submission TEXT, -- Stores proof of milestone completion (S3 link, no IPFS)
  onchain_reference VARCHAR(255), -- Prepares for Base L2 integration later
  created_at TIMESTAMP DEFAULT NOW()
);
```
‚úÖ **Milestones will be off-chain first, but `onchain_reference` will store the smart contract interaction ID in the future.**  

---

# **üü• API Design (No Blockchain Yet, Prepares for OnchainKit)**
üìå **Base URL:** `https://api.codacollective.xyz`  
üìå **Version:** `v1`  

### **1Ô∏è‚É£ Authentication (Privy Ready, Not Implemented Yet)**
| **Method** | **Endpoint** | **Description** |
|---|---|---|
| `POST` | `/auth/connect-wallet` | Placeholder for Privy login (returns fake session for now). |
| `GET` | `/auth/session` | Checks if the user is logged in (fake session for now). |
| `POST` | `/auth/logout` | Logs the user out. |

---

### **2Ô∏è‚É£ Projects & Funding (Off-Chain First)**
| **Method** | **Endpoint** | **Description** |
|---|---|---|
| `GET` | `/projects` | Fetch all available projects |
| `GET` | `/projects/{id}` | Fetch details of a specific project |
| `POST` | `/projects` | Create a new artist project (authenticated users only) |
| `POST` | `/projects/{id}/fund` | Allows a user to invest in a project |

‚úÖ **For now, all project funding is tracked in PostgreSQL, but the API includes `onchain_reference` fields for future Base L2 integration.**  

---

### **3Ô∏è‚É£ Fan Investments (Off-Chain First, On-Chain Later)**
| **Method** | **Endpoint** | **Description** |
|---|---|---|
| `GET` | `/user/investments` | Fetch all investments by the logged-in user |
| `GET` | `/investments/{id}` | Fetch investment details |
| `POST` | `/investments/{id}/claim-payout` | Claim milestone-based revenue payout |

‚úÖ **All investments are stored in PostgreSQL initially but can be mapped to Base L2 later.**  

---

### **4Ô∏è‚É£ Milestones & Payouts (Off-Chain First, On-Chain Later)**
| **Method** | **Endpoint** | **Description** |
|---|---|---|
| `GET` | `/projects/{id}/milestones` | Fetch milestones for a project |
| `POST` | `/milestones/{id}/submit-proof` | Artists submit proof for milestone approval |
| `POST` | `/milestones/{id}/approve` | Admin approves a milestone & releases funds |

‚úÖ **For now, milestones and payouts are tracked off-chain. Once OnchainKit is implemented, payouts will trigger Base L2 transactions.**  

---

# **üü• External Integrations**
‚úÖ **No IPFS**  
‚úÖ **No smart contracts yet, but database includes `onchain_reference` fields for future Base L2 integration**  
‚úÖ **Revelator Pro integration will be handled in `/projects/{id}/finalize` API**  

---

### **üü• Summary of What‚Äôs Built Now vs. Future Work**
| **Feature** | **Built Now (Phase 1)** | **Future (Phase 2, OnchainKit)** |
|---|---|
| **User Auth** | Privy-ready backend, using fake sessions for now | Full Privy integration (JWT authentication) |
| **Projects** | Stored in PostgreSQL | OnchainKit deployment on Base L2 |
| **Investments** | Off-chain in PostgreSQL | Tokenized on Base L2 |
| **Milestones** | Off-chain approvals & payouts | On-chain payout execution via smart contract |
| **Storage** | S3 for metadata & proof submissions | N/A (no IPFS) |

---

### **üöÄ Next Steps for Engineers**
‚úÖ **Implement API endpoints using Express.js**  
‚úÖ **Deploy PostgreSQL DB & Prisma ORM**  
‚úÖ **Ensure all `onchain_reference` fields are included for later Base L2 integration**  
‚úÖ **Build basic session-based auth (Privy-ready, not implemented yet)**  

---

This ensures **we can fully build the backend now**, while leaving room for **Base L2 and OnchainKit integration in Phase 2**. Let me know if any details need refinement! üöÄ